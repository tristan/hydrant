################################################## 
# WorkflowServiceImplService_services_types.py 
# generated by ZSI.generate.wsdl2python
##################################################


import ZSI
import ZSI.TCcompound
from ZSI.schema import LocalElementDeclaration, ElementDeclaration, TypeDefinition, GTD, GED

##############################
# targetNamespace
# http://jaxb.dev.java.net/array
##############################

class ns0:
    targetNamespace = "http://jaxb.dev.java.net/array"

    class stringArray_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://jaxb.dev.java.net/array"
        type = (schema, "stringArray")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.stringArray_Def.schema
            TClist = [ZSI.TC.String(pname="item", aname="_item", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._item = []
                    return
            Holder.__name__ = "stringArray_Holder"
            self.pyclass = Holder

# end class ns0 (tns: http://jaxb.dev.java.net/array)

##############################
# targetNamespace
# http://server.kepler.jcu.edu.au/
##############################

class ns1:
    targetNamespace = "http://server.kepler.jcu.edu.au/"

    class getWorkflows_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://server.kepler.jcu.edu.au/"
        type = (schema, "getWorkflows")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.getWorkflows_Def.schema
            TClist = []
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "getWorkflows_Holder"
            self.pyclass = Holder

    class getWorkflowsResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://server.kepler.jcu.edu.au/"
        type = (schema, "getWorkflowsResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.getWorkflowsResponse_Def.schema
            TClist = [ZSI.TC.String(pname="return", aname="_return", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = []
                    return
            Holder.__name__ = "getWorkflowsResponse_Holder"
            self.pyclass = Holder

    class getWorkflows_Dec(ElementDeclaration):
        literal = "getWorkflows"
        schema = "http://server.kepler.jcu.edu.au/"
        def __init__(self, **kw):
            kw["pname"] = ("http://server.kepler.jcu.edu.au/","getWorkflows")
            kw["aname"] = "_getWorkflows"
            if ns1.getWorkflows_Def not in ns1.getWorkflows_Dec.__bases__:
                bases = list(ns1.getWorkflows_Dec.__bases__)
                bases.insert(0, ns1.getWorkflows_Def)
                ns1.getWorkflows_Dec.__bases__ = tuple(bases)

            ns1.getWorkflows_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "getWorkflows_Dec_Holder"

    class getWorkflowsResponse_Dec(ElementDeclaration):
        literal = "getWorkflowsResponse"
        schema = "http://server.kepler.jcu.edu.au/"
        def __init__(self, **kw):
            kw["pname"] = ("http://server.kepler.jcu.edu.au/","getWorkflowsResponse")
            kw["aname"] = "_getWorkflowsResponse"
            if ns1.getWorkflowsResponse_Def not in ns1.getWorkflowsResponse_Dec.__bases__:
                bases = list(ns1.getWorkflowsResponse_Dec.__bases__)
                bases.insert(0, ns1.getWorkflowsResponse_Def)
                ns1.getWorkflowsResponse_Dec.__bases__ = tuple(bases)

            ns1.getWorkflowsResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "getWorkflowsResponse_Dec_Holder"

# end class ns1 (tns: http://server.kepler.jcu.edu.au/)
